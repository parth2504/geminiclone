import { useParams, Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Image, Send } from "lucide-react";
import { useChatStore } from "@/store/chatStore";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { ChatMessage } from "@/components/ChatMessage";
import { TypingIndicator } from "@/components/TypingIndicator";
import { useEffect, useRef, useState } from "react";
import { showError } from "@/utils/toast";

const formSchema = z.object({
  message: z.string().min(1, "Message cannot be empty"),
});

const Chatroom = () => {
  const { id } = useParams<{ id: string }>();
  const chatroom = useChatStore((state) =>
    state.chatrooms.find((c) => c.id === id)
  );
  const [messages, setMessages] = useState<any[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      message: "",
    },
  });

  useEffect(() => {
    // Simulate loading some initial messages
    if (chatroom) {
      const initialMessages = [
        {
          id: "1",
          content: `Hello! I'm Gemini. How can I help you with "${chatroom.title}" today?`,
          isUser: false,
          timestamp: new Date(Date.now() - 3600000),
        },
        {
          id: "2",
          content: "I'd like to learn more about this topic.",
          isUser: true,
          timestamp: new Date(Date.now() - 1800000),
        },
        {
          id: "3",
          content: "Great! I can provide information, answer questions, and help with various topics related to this subject.",
          isUser: false,
          timestamp: new Date(Date.now() - 900000),
        },
      ];
      setMessages(initialMessages);
    }
  }, [chatroom]);

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        setImagePreview(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    if (!chatroom) return;

    const newUserMessage = {
      id: Date.now().toString(),
      content: values.message,
      isUser: true,
      timestamp: new Date(),
      imageUrl: imagePreview || undefined,
    };

    setMessages((prev) => [...prev, newUserMessage]);
    setImagePreview(null);
    form.reset();

    // Simulate AI typing
    setIsTyping(true);
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // Simulate AI response
    const aiResponse = {
      id: (Date.now() + 1).toString(),
      content: `I've received your message about "${values.message}". Here's some simulated response based on your input. In a real app, this would be generated by an AI model.`,
      isUser: false,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, aiResponse]);
    setIsTyping(false);
  };

  if (!chatroom) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <h1 className="text-2xl font-bold mb-4">Chatroom not found</h1>
        <Button asChild>
          <Link to="/">Go to Dashboard</Link>
        </Button>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 h-screen flex flex-col">
      <header className="flex items-center gap-4 mb-4">
        <Button asChild variant="ghost" size="icon">
          <Link to="/">
            <ArrowLeft />
          </Link>
        </Button>
        <h1 className="text-xl font-bold">{chatroom.title}</h1>
      </header>
      <div className="flex flex-col flex-grow border rounded-lg overflow-hidden">
        <div className="flex-grow overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <ChatMessage
              key={message.id}
              content={message.content}
              isUser={message.isUser}
              timestamp={message.timestamp}
              imageUrl={message.imageUrl}
            />
          ))}
          {isTyping && <TypingIndicator />}
          <div ref={messagesEndRef} />
        </div>
        <div className="border-t p-4">
          <Form {...form}>
            <form
              onSubmit={form.handleSubmit(onSubmit)}
              className="flex gap-2"
            >
              <div className="relative flex-grow">
                <FormField
                  control={form.control}
                  name="message"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <FormControl>
                        <Input
                          placeholder="Type a message..."
                          className="pr-10"
                          {...field}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <label className="absolute right-2 top-1/2 -translate-y-1/2">
                  <input
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handleImageUpload}
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8"
                  >
                    <Image className="h-4 w-4" />
                  </Button>
                </label>
              </div>
              <Button type="submit" size="icon">
                <Send className="h-4 w-4" />
              </Button>
            </form>
          </Form>
          {imagePreview && (
            <div className="mt-2 relative">
              <img
                src={imagePreview}
                alt="Preview"
                className="h-20 w-20 object-cover rounded-lg"
              />
              <Button
                variant="ghost"
                size="icon"
                className="absolute -right-2 -top-2 h-6 w-6 rounded-full"
                onClick={() => setImagePreview(null)}
              >
                <span className="text-xs">Ã—</span>
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Chatroom;